# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: avallete <avallete@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2015/02/18 13:18:20 by avallete          #+#    #+#              #
#*   Updated: 2016/08/06 03:56:22 by avallete         ###   ########.fr       *#
#                                                                              #
# **************************************************************************** #
# run in POSIX-conforming mode
.POSIX:
# set default make goal
.DEFAULT_GOAL ::=all
# Provide variables for overriding certain commands
# override thems if you want to run some commands with specific flags.
# Avoid trouble on systems where SHELL variable is inherited from environment
SHELL ::=/bin/sh

CC ::=clang
FIND ::=find
MKDIR_P ::=mkdir -p
NORMINETTE ::=~/.norminette/norminette.rb
RM ::=rm -rf
TAR ::=tar
CP ::=cp -f
AR ::=ar
RANLIB ::=ranlib

# Name of the binary to compile
NAME ::=libsignal.a
IS_LIB ::=1
VERBOSE ::=
# Set this variable to compile with debugging flags
DEBUG ::=
# Replace with your sources base folder
SRCDIR ::=./src/
# Replace with your includes base folder
INCDIR ::=./includes/
# Extra includes directories to provide for compiling
# Eg: /sys/includes/
INCDIRS ::=
# Compiler externals libraries flags
# Eg: -L /path/to/libft -lft
LDLIBS ::=
# List of sub-directories to be build with make as well
# Eg: SUBDIRS=./libft/ ./mylibsdl/
SUBDIRS ::=
# List of paths to exclude from the sources files search
SEARCHIGNORE ::=

# Used to make target rules and find files with update
# Can be changed to .cpp and .hpp for C++
SRCSUFFIXE ::=.c
INCSUFFIXE ::=.h
OBJSUFFIXE ::=.o
# You shouldn't need to change this one
depsuffixe ::=.d

# Where the temporary files generated by some scripts should be stored
TEMPDIR ::=/tmp
# Where the .o and .d files will be stored
OBJDIR ::=./obj
OBJDIRDEBUG ::=./obj/debug
# Where the final binary will be stored
DESTDIR ::=.

# Custom non-required flags for compilations, feel free to change thems
CFLAGS ::=-Os -Wshadow -Wdouble-promotion -Wundef -fno-common -Wconversion \
		 -ffunction-sections -fdata-sections
# Custome flags to apply at liking time (only for non static libs)
LFLAGS ::=-Wl,--gc-sections
# Flags to use to use when debugging
DFLAGS ::=-O0 -ggdb3 -fsanitize=address -fsanitize=undefined

# Make sure all user provided paths are normalized
# Use abspath instead of realpath because some of the folders may be created by make
norm_subdirs ::=$(abspath $(SUBDIRS))
norm_searchignore ::=$(abspath $(SEARCHIGNORE))
norm_incdirs ::=$(abspath $(INCDIRS))
norm_tempdir ::=$(abspath $(TEMPDIR))
norm_srcdir ::=$(abspath $(SRCDIR))
norm_incdir ::=$(abspath $(INCDIR))
norm_objdir ::=$(abspath $(OBJDIR))
norm_objdirdebug ::=$(abspath $(OBJDIRDEBUG))
norm_destdir ::=$(abspath $(DESTDIR))

# /!\ DO NOT REMOVE ANY COMMENTS STARTING WITH ##! /!\
##!STARTSRC
srcpaths ::=./src/ft_get_signal_data.c\
./src/ft_parse_signal.c\
./src/ft_signal_init.c
##!ENDSRC

##!STARTINC
incpaths ::=./includes/ft_signal.h
##!ENDINC

# Retrieve the absolute normalized path from relative paths
srcpaths ::=$(realpath $(srcpaths))
incpaths ::=$(realpath $(incpaths))

# Required compilations flags
rflags ::=-Wall -Wextra -Werror -MMD
# Compiler includes flags
# List of all the directories containing .h headers
# sort is use to remove duplicates
# dir is use to get the directories from the filepaths
autoincdirs ::=$(sort $(realpath $(dir $(incpaths))))
iflags ::=$(addprefix -I, $(sort $(autoincdirs) $(norm_incdirs)))
allflags ::=$(rflags) $(iflags)

ifdef DEBUG
	norm_objdir ::=$(norm_objdirdebug)
	allflags += $(DFLAGS)
endif

# Used to silence or show commands depending on the VERBOSE variable
ifdef VERBOSE
	v ::=
	submakeopts ::=
else
	v ::=@
	submakeopts ::=-s
endif

# Choose to create binary or lib archive
ifndef IS_LIB
define compile_product
	$(call cecho, ${lblue}, "Use compile flags: $(allflags) $(LFLAGS)")
	$(call cecho, ${lblue}, "Link it with some external libs: $(LDLIBS)")
	$(v)$(CC) $(allflags) $(LFLAGS) $1 -o $2 $(LDLIBS)
endef
else
define compile_product
	$(call cecho, ${lblue}, "Use compile flags: $(allflags)")
	$(call cecho, ${lblue}, "Create static library archive")
	$(v)$(AR) rc $2 $1
	$(call cecho, ${lblue}, "Create index for archives")
	$(v)$(RANLIB) $2
endef
endif


# Define some utils to get pretty colored output
red ::=\033[0;31m
lblue ::=\033[34m
green ::=\033[32m
cyan ::=\033[0;36m
orange ::=\033[0;33m
magenta ::=\033[0;35m
nc ::=\033[0m
define cecho
	$(v)echo "$1$2${nc}"
endef

# Retrieve the actual Makefile path (avoid problems when using make -f Filename)
mkfilepath ::=$(abspath $(lastword $(MAKEFILE_LIST)))
# Retrieve the directory name where that Makefile is located
mkfiledir ::=$(abspath $(dir $(mkfilepath)))
# Use those informations to retrieve relative paths from normed path
# We use thems to make update rule more robuste, based on relative paths instead
# Of some absolute path who will change each time the project is installed somewhere
relsrcdir ::=$(norm_srcdir:$(mkfiledir)/%=./%)
relincdir ::=$(norm_incdir:$(mkfiledir)/%=./%)
relsubdirs ::=$(norm_subdirs:$(mkfiledir)/%=./%)
relsearchignore ::=$(norm_searchignore:$(mkfiledir)/%=./%)
# Exclude subdirs from find search since their files must be handle by their own makefile
find_exclude ::=$(foreach dir, $(relsubdirs) $(relsearchignore), \( -path $(dir) -prune \) -o)
define update_makefile_sources
	$(eval tmp_srcsfile := $(shell mktemp -p "$(norm_tempdir)"))
	$(eval tmp_incsfile := $(shell mktemp -p "$(norm_tempdir)"))
	$(shell printf "##!STARTSRC\nsrcpaths ::=$$(${FIND} ${relsrcdir} ${find_exclude} -type f -regex ".+\${SRCSUFFIXE}" -print | sed '$$!s/$$/\\/')\n##!ENDSRC\n" > $(tmp_srcsfile))
    $(shell printf "##!STARTINC\nincpaths ::=$$(${FIND} ${relincdir} ${find_exclude} -type f -regex ".+\${INCSUFFIXE}" -print | sed '$$!s/$$/ \\/')\n##!ENDINC\n" > $(tmp_incsfile))
	$(v)sed -i -e "/^##!ENDSRC/r $(tmp_srcsfile)" -e '/^##!STARTSRC/,/^##!ENDSRC/d' $(mkfilepath)
	$(v)sed -i -e "/^##!ENDINC/r $(tmp_incsfile)" -e '/^##!STARTINC/,/^##!ENDINC/d' $(mkfilepath)
	$(v)rm -f $(tmp_srcsfile) $(tmp_incsfile)
endef

srcfiles ::=$(srcpaths:$(norm_srcdir)/%=%)
srcnames ::=$(notdir $(srcfiles))
objnames ::=$(srcfiles:$(SRCSUFFIXE)=$(OBJSUFFIXE))
objfiles ::=$(addprefix $(norm_objdir)/, $(objnames))
depfiles ::=$(objfiles:%$(OBJSUFFIXE)=%$(depsuffixe))
distname ::=$(basename $(NAME))
distpath ::=$(norm_destdir)/$(distname).tar.gz
destpath ::=$(norm_destdir)/$(NAME)

# include all gcc -MMD generated dependencies files as targets
-include $(depfiles)

.PHONY: all
all: $(destpath)

.PHONY: clean
clean:
	$(v)$(call cecho, ${red}, "Cleanup: Delete $(norm_objdir) directory.")
	$(v)$(RM) $(norm_objdir)

.PHONY: fclean
fclean: clean
	$(v)$(call cecho, ${red}, "Cleanup: Delete $(destpath).")
	$(v)$(RM) $(destpath)

.PHONY: re
re: fclean all

.PHONY: dist
dist: $(distpath)

.PHONY: dist-clean
dist-clean:
	$(v)$(RM) $(distpath)
	$(v)$(call cecho, ${red}, "Cleanup: Delete $(distpath) archive.")

.PHONY: update
update: | $(norm_tempdir)
	$(v)$(call update_makefile_sources)
	$(v)$(call cecho, ${lblue}, "Makefile sources rewriten based on $(norm_srcdir) and $(norm_incdir) content.")

.PHONY: norm
norm:
	$(v)$(NORMINETTE) $(norm_srcdir) $(norm_incdir)

.PHONY: noflags
noflags: allflags = $(iflags) -MMD
noflags: re

.PHONY: subdirs
subdirs: $(norm_subdirs)

$(destpath): $(objfiles) | $(norm_destdir) $(norm_subdirs)
	$(v)$(call compile_product, $^, $@)
	$(v)$(call cecho, ${green}, "Success: $@ compiled.")

$(norm_destdir):
	$(v)$(MKDIR_P) $(norm_destdir)

$(norm_objdir):
	$(v)$(MKDIR_P) $(norm_objdir)

$(norm_tempdir):
	$(v)$(MKDIR_P) $(norm_tempdir)

$(norm_objdir)/%$(OBJSUFFIXE): $(norm_srcdir)/%$(SRCSUFFIXE) | $(norm_objdir)
	$(v)$(call cecho, ${orange}, "Compile: $<	-\>	$@")
	$(v)$(MKDIR_P) $(@D)
	$(v)$(CC) $(allflags) -c $< -o $@

$(distpath): $(destpath) | $(norm_tempdir)
	$(v)$(MKDIR_P) $(norm_tempdir)/$(distname)
	$(v)$(CP) $(destpath) $(norm_tempdir)/$(distname)
	$(v)$(TAR) -czf $(distpath) -C $(norm_tempdir) $(distname)
	$(v)$(RM) $(norm_tempdir)/$(distname)
	$(v)$(call cecho, ${cyan}, "$(distpath) archive created.")

# Add $(norm_subdirs) to .PHONY allow hierarchical and parallel build
.PHONY: subdirs $(norm_subdirs)
$(norm_subdirs):
	$(v)$(MAKE) $(submakeopts) -C $@ $(MAKECMDGOALS)
subdirs: $(norm_subdirs)
